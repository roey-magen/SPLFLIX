


when initialyzing new project:
git init - מאתחל סביבת עבודה
git clone <url> - הורדת הפרוייקט לסביבת העבודה




when you want to work on existing project:
1. open the project folder in terminal. (local folder)
2. git pull origin master - עדכון הפרוייקט לגרסא הכי עדכנית
3. make changes in the project as you wish.
4.git status - check which files modified.
5. for each file:
	git add <file_name> - לשים לב לאותיות גדולות
6. git status - תבדוק שהקבצים ששונו צבועים בירוק
7. git commit -m "<רשום מה שינית>"
8. git pull origin master - עדכן את הפרוקייט לגרסא הכי עדכנית לפני ביצוע עדכון
9.git push origin master- דחוף את הפרוייק לגיטהאב






void buildDataBase(const string& path, vector<Watchable*> & content) {
        std::ifstream i("/home/tzach/CLionProjects/projectA/untitled/config1.json");///change to path later.
        if(!i){///need to check what to do if failed to load file.(maybe remove at the end)
            std::cout <<"failed";
        }
        json j;
        i>>j;
        ///finish reading file here
        long index = 0;
        for (auto it:j["movies"]) {
            string movie_name = it["name"].get<std::string>();
            int movie_length = it["length"];
            vector<string> tags;
            for (auto tag:it["tags"])
                tags.push_back(tag.get<std::string>());
            Watchable *movie = new Movie(index, movie_name, movie_length, tags);//check if we need to free this.
            index++;
            content.push_back(movie);
        }
        for (auto it:j["tv_series"]) {
            string series_name = it["name"].get<std::string>();
            int series_length = it["episode_length"];
            vector<string> tags;
            for (auto tag:it["tags"])
                tags.push_back(tag.get<std::string>());
            int season_number = 0;
            for (auto season:it["seasons"]) {
                season_number++;
                int episode_number = 1;
                while (season.get<std::int8_t>() != 0) {//need to check it reads!
                    Watchable *episode = new Episode(index, series_name, series_length, season_number, episode_number,
                                                     tags);//check if we need to free.
                    content.push_back(episode);
                    index++;
                    episode_number++;
                }

            }

        }
    }
